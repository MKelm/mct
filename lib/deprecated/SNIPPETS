// database initialization
mct.db = openDatabase('mctdb1', '1.0', 'mctdb1', 2 * 1024 * 1024);
var ts = baseUtilTime("unix");
mct.db.transaction(function (tx) {
  tx.executeSql('CREATE TABLE IF NOT EXISTS player (option unique, value)');
  tx.executeSql('INSERT INTO player (option, value) VALUES ("time", ?)', [ts]);
});
mct.db.transaction(function (tx) {
  tx.executeSql('UPDATE player SET value = ? WHERE option = "time"', [ts]);
});
tx.executeSql('SELECT * FROM foo', [], function (tx, results) {
  var len = results.rows.length, i;
  for (i = 0; i < len; i++) {
    alert(results.rows.item(i).text);
  }
});

// planet tween easing animation
var tween = new TWEEN.Tween( { x: planet.position.x, y: planet.position.x  } )
.to( { y: planet.position.y - 100, x: planet.position.x - 100 }, 10000 )
.easing( TWEEN.Easing.Elastic.InOut )
.onUpdate( function () {
    planet.position.x = this.x;
    planet.position.y = this.y;
} )
.start()
.delay(1000);

// welcome message for testers
displayWindowAdd(
'eventmessage',
'event/message.json',
{
  "dynEventTitle" : "Welcome to your control center",
  "dynEventDescription" :
    ["You are a master of control, you can click on start and quit or ",
     "press F1 to get a FPS Counter. If you press F2 you can open a survey to report bugs. Or ",
     "press F3 to report about your impressions. Or you can press F4 to report ",
     "your suggestions. You can fill out surveys multiple times and it would help to improve the game."],
  "dynEventWinMessage" : "- You won some experiences in launching a pre-alpha game.",
  "dynEventFailMessage" :
    ["- But you failed to react quickly enough to close it, ",
     "now you are addicted to play more of it."]
} // dynamic texts
);

// prepare technology data for window
var technologyFieldsForTypeElements = [];
// the following var contains types for each field for single type
// it has to be an object, because the properties depend on the parameter (element handle) of the parent layer
// to get the right menu elements in the new layer
var technologyFieldTypesElements = {};
var technologyFieldsForTypesElements = [];
for (var fp in mct.data.technologies.fields) {
if (mct.data.technologies.fields[fp].companies.for == 'type') {
  technologyFieldsForTypeElements.push([fp, mct.data.technologies.fields[fp].title]);
  technologyFieldTypesElements[fp] = [];
  for (var tp in mct.data.technologies.fields[fp].types) {
    technologyFieldTypesElements[fp].push([tp, mct.data.technologies.fields[fp].types[tp].title]);
  }
} else {
  technologyFieldsForTypesElements.push([fp, mct.data.technologies.fields[fp].title]);
}
}

var technologyCompaniesElements = {};
for (var fp in mct.data.planets[mct.status.planet].companies.valid) {
if (typeof mct.data.planets[mct.status.planet].companies.valid[fp].length != "undefined") {
  technologyCompaniesElements[fp] = [];
  for (var i = 0; i < mct.data.planets[mct.status.planet].companies.valid[fp].length; i++) {
    technologyCompaniesElements[fp].push(
      [i, mct.data.planets[mct.status.planet].companies.valid[fp][i].name]
    );
  }
} else {
  technologyCompaniesElements[fp] = {};
  for (var tp in mct.data.planets[mct.status.planet].companies.valid[fp]) {
    technologyCompaniesElements[fp][tp] = [];
    for (var i = 0; i < mct.data.planets[mct.status.planet].companies.valid[fp][tp].length; i++) {
      technologyCompaniesElements[fp][tp].push(
        [i, mct.data.planets[mct.status.planet].companies.valid[fp][tp][i].name]
      );
    }
  }
}
}

// add planet companies window
displayWindowAdd(
'planetcompanies',
'planet/companies.json',
{}, // dynamic texts
{
  "technologyfieldsfortype" : technologyFieldsForTypeElements,
  "technologyfieldtypes" : technologyFieldTypesElements,
  "technologyfieldsfortypes" : technologyFieldsForTypesElements,
  "technologycompanies" : technologyCompaniesElements
} // dynamic menu / content elements
);
displayWindowLayer("planetcompanies", 0, "hardware", 1);
displayWindowLayer("planetcompanies", 1, "tel", 2);

// welcome message window planet scene
displayWindowAdd(
'eventmessage',
'event/message.json',
{
  "dynEventTitle" : "Welcome to the planet screen",
  "dynEventDescription" :
    ["The planet screen contains a first version of a companies window with different layers ",
     "and menus. The current company names are generated by a random selection. ",
     "In the background you see the planet Anuka (Earth). The dots you see ",
     "are part of the new grid system and the first building on the planet map is the investments center."],
  "dynEventWinMessage" : "- You can use the suggestions survey by pressing F3 if you have an idea for the planet screen.",
  "dynEventFailMessage" : "- The scaling/wordwrap of window elements will be improved when the game gets an own layout manager."
} // dynamic texts
);
